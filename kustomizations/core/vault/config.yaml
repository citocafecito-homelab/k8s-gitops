---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
data:
  vault.hcl: |
    ui              = true
    disable_mlock   = true
    cluster_name    = "catuai"

    listener "tcp" {
      address     = "0.0.0.0:8200"
      tls_disable = true
    }

    storage "file" {
      path = "/vault/data"
    }

    api_addr = "http://vault.core.svc.cluster.local:8200"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-entrypoint
data:
  vault-entrypoint.sh: |
    #!/bin/sh
    set -e

    # Environment setup
    export VAULT_ADDR="http://127.0.0.1:8200"
    export VAULT_SKIP_VERIFY=true
    VAULT_CONFIG="/vault/config/vault.hcl"

    echo "üöÄ Starting Vault server..."
    vault server -config="$VAULT_CONFIG" &
    VAULT_PID=$!

    sleep 2

    # Check Vault seal status (without using jq)
    SEALED=$(vault status -format=json | grep -o '"sealed":[^,]*' | cut -d':' -f2 | tr -d '[:space:]')

    if [ "$SEALED" = "true" ]; then
      echo "üîí Vault is sealed. Attempting to unseal..."
      vault operator unseal "$UNSEAL_KEY"
    elif [ "$SEALED" = "false" ]; then
      echo "‚úÖ Vault is already unsealed."
    else
      echo "‚ö†Ô∏è Unable to determine Vault status (value: '$SEALED')."
      exit 1
    fi

    # Configure Kubernetes authentication method
    echo "üîß Configuring Kubernetes authentication..."
    vault write auth/kubernetes/config \
      token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      kubernetes_host="https://kubernetes.default.svc.cluster.local:443" \
      kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt || true

    echo "‚úÖ Vault initialized and configured. Running in foreground..."

    # Keep Vault running in the foreground
    wait $VAULT_PID
